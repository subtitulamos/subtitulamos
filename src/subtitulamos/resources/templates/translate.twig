{% extends "base.twig" %}
{% import 'macros/alerts.twig' as alerts %}
{% import 'macros/assets.twig' as assets %}

{% block title %}Traducir {{ sub.version.episode.fullname }}{% endblock %}
{% block css %}
  {{ assets.css('translate') }}
{% endblock %}

{% block content %}
<div id="translation" class="content limited-width">
  <div :class="{'hidden': loaded || !loadedOnce}">
  {{ alerts.show('error', "Conexión con el servidor de traducción perdida. Reestableciendo...") }}
  </div>
  <div id="show-info-header">
    {% set go_back_link = "/episodes/" ~ sub.version.episode.id ~ "/" ~ sub.version.episode.fullName %}
    <a href="/episodes/{{ sub.version.episode.id }}/{{ sub.version.episode.fullName }}">
      <div id="translating-header" class="text small blue-a">
          <i class="fas fa-chevron-left"></i> Traduciendo...
      </div>
    </a>
    <div id="show-name">
      <a href="{{go_back_link}}">
        <h1 class="blue-a">{{ episode.show.name }}</h1>
      </a>
    </div>
    <div id="episode-header">
      <a href="{{go_back_link}}">
        <div id="episode-name">
          <h3 class="blue-a">{{ episode.name }}</h3>
          <div class="blue-b text small">({{ episode.season }}x{{ "%02d"|format(episode.number) }})</div>
        </div>
      </a>
    </div>
  </div>

  <div id="toggle-responsiveness-wrapper">
    <input type="checkbox" name="toggle-responsiveness" id="toggle-responsiveness">
    Ver secuencias en tabla
  </div>

  <div id="translation-details" :class="{'disabled': !loaded}">
    <div id="translation-header">
    {% verbatim %}
      <div id='filters'>
        <div class="filter">
          Filtrar por cadena <input type="text" id="text-filter" @keyup="(e) => { filters.text = e.target.value; onChangePage(1) }" :value="filters.text" />
          <span
            :data-hint="filters.preciseTextMatching ? 'Búsqueda estricta habilitada' : 'Búsqueda estricta deshabilitada'">
              <i class="precise-search fas fa-crosshairs" :class="{ 'active': filters.preciseTextMatching }" aria-hidden="true" @click="togglePreciseTextMatching"></i>
          </span>
        </div>

        <div class="filter">
        Filtrar por autor
        <select id='author-filter' @change="onChangePage(1)" v-model="filters.author">
          <option value="0">Todos</option>
          <option v-for="(username, uid) in authors" :value="uid">{{ username }}</option>
        </select>
        </div>

        <div class="filter">
          <input type='checkbox' id='untranslated-filter' @change="onChangePage(1)" v-model="filters.onlyUntranslated">
          Ver solo secuencias sin traducir
        </div>
      </div>
    {% endverbatim %}
      <div id='translation-tools'>

        <div class="main-tools">
          <div class="tool-group">
            <button type="button" @click="lockPage(true)" class="tool lock-tool" v-if="hasAdvancedTools">
              <i class="fas fa-lock"></i>
              <span>Bloquear todo</span>
            </button>
            <button type="button" @click="lockPage(false)" class="tool lock-tool" v-if="hasAdvancedTools">
              <i class="fas fa-unlock"></i>
              <span>Desbloquear todo</span>
            </button>
          </div>
          <div class="tool-group">
            <button type="button" @click="goTo" class='tool hint--bottom' data-hint="Ctrl+G">
              <i class="fas fa-angle-double-right"></i>
              <span>Ir a secuencia</span>
            </button>
          </div>
          <div class="tool-group">
            <button type="button" @click="openPage" class="tool">
              <i class="fas fa-envelope-open-text"></i>
              <span>Abrir todo</span>
            </button>
            {% if not sub.original %}
              <button type="button" @click="openUntranslatedPage" class="tool">
                <i class="fas fa-envelope-open"></i>
                <span>Abrir <i>sin traducir</i></span>
              </button>
            {% endif %}
            <button type="button" @click="closePage" class="tool">
              <i class="fas fa-envelope"></i>
              <span>Cerrar todo</span>
            </button>
          </div>
          <div class="tool-group">
            <button type="button" @click="fixPage" class="tool">
              <i class="fas fa-align-left"></i>
              <span>Alinear todo</span>
            </button>
          </div>
          <div class="tool-group">
            <button type="button" @click="savePage" class='tool hint--bottom' data-hint="Ctrl+Shift+S">
              <i class="fas fa-save"></i>
              <span>Guardar todo</span>
            </button>
          </div>
        </div>
        <div class="alert-tool-wrapper">
          <button type="button" @click="alertMod" class='alert-mod'><i class="fa fa-exclamation-triangle" aria-hidden="true"></i></button>
        </div>
      </div>
    </div>
    <pagelist :pages="pages" :cur-page="curPage" :last-page="lastPage" @change-page="onChangePage"></pagelist>

    <div>
      <div id="sequences" class="grid">
        <div class="grid-row grid-header">
          <div class="number"><span>#</span></div>
          <div class="user"><span>Autor</span></div>
          <div class="time"><span>Tiempos</span></div>
          {% if not sub.original %}
            <div class="text"><span>Idioma secundario</span></div>
            <div class="editable-text"><span>Traducción al {{ sub_lang }}</span></div>
          {% else %}
            <div class="text"></div>
            <div class="editable-text"><span>Original en {{ sub_lang }}</span></div>
          {% endif %}
          <div class="actions"></div>
        </div>
        {% verbatim %}
          <template v-for="seq in pageSequences">
            <sequence v-for="hseq in seq.history"
              :key="hseq.id"

              :id="hseq.id"
              :number="seq.number"
              :locked="false"
              :verified="false"
              :author="hseq.author"
              :tstart="hseq.tstart"
              :tend="hseq.tend"
              :secondary-text="seq.secondary_text"
              :text="hseq.text"
              :history="true">
            ></sequence>

            <sequence
              :key="'main-' + seq.number"

              :id="seq.id"
              :number="seq.number"
              :locked="seq.locked"
              :verified="seq.verified"
              :highlighted="seq.number == highlightedSequence"
              :author="seq.author"
              :tstart="seq.tstart"
              :tend="seq.tend"
              :secondary-text="seq.secondary_text"
              :text="seq.text"
              :open-info="seq.openInfo ? seq.openInfo : {id: 0}"
              :history="false"
              @highlight-on="highlight(seq.number)"
              @highlight-off="highlight(0)"
            ></sequence>
          </template>
        {% endverbatim %}
      </div>
    </div>

    <pagelist :pages="pages" :cur-page="curPage" :last-page="lastPage" @change-page="onChangePage"></pagelist>

    <div id="translation-locks" v-if="canReleaseOpenLock && openLocks.length > 0">
      <h4>Secuencias abiertas</h4>
      <ul>
        <seqlock v-for="lock in openLocks" :key="lock.seq_number" :id="lock.id" :uid="lock.uid" :seqnum="lock.seq_number" :time="lock.time" @jump="jumpToSequence(lock.seq_number)"></seqlock>
      </ul>
    </div>
  </div>

  <div id="translation-comments" class="comments-container ">
    <h4>Comentarios de traducción</h4>

    <div class="no-comments" v-if="comments.length == 0">Nadie ha dejado su comentario aún.</div>

    {% if not auth.user.ban %}
    <div class='newcomment-box'>
      {% verbatim %}
      <div class="open-comment">
        <label class="input-auto-sizer stacked" :data-value="newComment">
          <textarea id="new-comment" rows="2" v-model="newComment" class="textarea" placeholder="Escribe aquí tu comentario..." resizable="false"></textarea>
        </label>

        <div class="comment-meta">
          <div
            class='comment-char-counter text tiny'
            :class='{
              "normal-count": newComment.length <= maxCommentLength*0.9,
              "close-to-max": newComment.length > maxCommentLength*0.9 && newComment.length <= maxCommentLength,
              "too-many": newComment.length > maxCommentLength
            }'
          >
            <span id='comment-char-count'>{{ newComment.length < 1000 ? newComment.length : 999 }}
            </span> / <span id='comment-max-chars'>{{ maxCommentLength }}</span>
          </div>

          <button class="save-comment" @click="publishComment"
            :class="{'hidden': newComment == '',
              'is-loading': submittingComment,
              'is-primary': newComment.length <= maxCommentLength,
              'is-danger': newComment.length > maxCommentLength}"
            :disabled="newComment.length > maxCommentLength"
            @click="publishComment">
            <i class="fab fa-telegram-plane"></i>
            <span class="text mini spaced">ENVIAR</span>
          </button>
        </div>
      </div>
      {% endverbatim %}
    </div>
    {% endif %}

    <comment v-for="comment in comments"
        :key="comment.edited_at ? comment.id + comment.edited_at : comment.id"
        :id="comment.id"
        :user="comment.user"
        :base-text="comment.text"
        :published-at="comment.published_at"
        :edited-at="comment.edited_at"
        :pinned="comment.pinned"
        :create-sequence-jumps="true"
        @remove="remove"
        @pin="pin"
        @save="save"
      >
    </comment>
  </div>
</div>
{% endblock %}

{% block scripts %}
  <script type="text/javascript">
    var subID = {{ sub.id }};
    var isOriginalSub = {{ sub.original ? 'true' : 'false' }};
    var availSecondaryLangs = {{ avail_secondary_langs|raw }};
    var me = {
      id: {{ auth.user.id }},
      username: "{{ auth.user.username }}",
      roles: [{% for role in auth.user.roles %}"{{ role }}",{% endfor %}]
    };
    var userId = me.id;
    var wsAuthToken = "{{ wstok }}";
    var MAX_USER_EDIT_SECONDS = {{ constant('MAX_USER_EDIT_SECONDS') }};

    // Permissions
    var hasAdvancedTools = me.roles.includes('ROLE_TT');
    var canLock = me.roles.includes('ROLE_TT');
    var canReleaseOpenLock = me.roles.includes('ROLE_TT');
    var canDeleteComments = me.roles.includes('ROLE_MOD');
    var canEditComments = me.roles.includes('ROLE_MOD');
    var canPinComments = {{ auth.has_role('ROLE_MOD') ? 'true' : 'false' }};
    var canEditTimes = me.roles.includes('ROLE_MOD');
    var canAddSequence = me.roles.includes("ROLE_MOD");
    var isBanned = {{ auth.user.ban ? 'true' : 'false' }};
  </script>
  {{ assets.js('translate') }}
{% endblock %}
