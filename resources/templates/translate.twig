{% extends "base.twig" %}
{% import 'macros/assets.twig' as assets %}

{% block bulma %}
  {# No bulma on this page for now (TODO: Support it!) #}
  {# We use normalize instead for the meanwhile #}
  {{ assets.css('normalize') }}
{% endblock %}
{% block title %}Traducir {{ sub.version.episode.fullname }}{% endblock %}
{% block css %}
  {{ assets.css('translate') }}
{% endblock %}

{% block content %}
<div id="translation">
  <header>
    Traduciendo <span id="episode-title"><a href='/episodes/{{ sub.version.episode.id }}'>{{ sub.version.episode.fullname }}</a></span>
    {% if feature_on('ALERTS') %}
      <button type="button" @click="alertMod" class='alert-mod'><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Avisar a un moderador</button>
    {% endif %}
  </header>

  <div id="translation-disabled-warning" :class="{'hidden': loaded || !loadedOnce}">
    Conexión con el servidor de traducción perdida. Reestableciendo...
  </div>

  <div id="translation-details" :class="{'disabled': !loaded}">
    <div id='translation-tools'>
      <button type="button" @click="goTo" class='hint--top hint--bounce' data-hint="Ctrl+G">Ir a secuencia</button>
      <button type="button" @click="openPage">Abrir todo</button>
      <button type="button" @click="openUntranslatedPage">Abrir sin traducir</button>
      <button type="button" @click="savePage" class='hint--top hint--bounce' data-hint="Ctrl+Shift+S">Guardar todo</button>
      <button type="button" @click="fixPage">Alinear todo</button>
      <button type="button" @click="closePage">Cerrar todo</button>
      <button type="button" @click="lockPage(true)" class="lock-tool" v-if="hasAdvancedTools">Bloquear todo</button>
      <button type="button" @click="lockPage(false)" class="lock-tool" v-if="hasAdvancedTools">Desbloquear todo</button>
    </div>

    {% verbatim %}
      <div id='filters'>
        Filtrar por cadena: <input type="text" id="text-filter" @keyup="(e) => { filters.text = e.target.value; onChangePage(1) }" :value="filters.text" />
        <span class='hint--bottom-right hint--bounce hint--rounded bullseye-wrapper'
          :data-hint="filters.preciseTextMatching ? 'Búsqueda estricta habilitada' : 'Búsqueda estricta deshabilitada'">
            <i class="fa fa-bullseye" :class="{ 'bullseye-active': filters.preciseTextMatching }" aria-hidden="true" @click="togglePreciseTextMatching"></i>
        </span>
        &nbsp;&nbsp;-&nbsp;&nbsp;
        Filtrar por autor:
        <select id='author-filter' @change="onChangePage(1)" v-model="filters.author">
          <option value="0">Todos</option>
          <option v-for="(username, uid) in authors" :value="uid">{{ username }}</option>
        </select>
        &nbsp;&nbsp;-&nbsp;&nbsp;
        <input type='checkbox' id='untranslated-filter' @change="onChangePage(1)" v-model="filters.onlyUntranslated">
        <label for='untranslated-filter'>
          Ver solo secuencias sin traducir
        </label>
      </div>
    {% endverbatim %}
    <div class="page-wrapper">
      <pagelist :pages="pages" :cur-page="curPage" :last-page="lastPage" @change-page="onChangePage"></pagelist>
    </div>

    <table id="sequences">
      <thead>
        <tr>
          <th>#</th>
          <th>Autor</th>
          <th>Tiempos</th>
          <th>Idioma secundario{#: <span id='secondary-language-name'>English</span> <i class="fa fa-caret-down" aria-hidden="true"></i>#}</th>
          <th>Traducción al <span id='target-language-name'>{{ sub_lang }}</span></th>
          <th></th>
        </tr>
      </thead>

      {% verbatim %}
        <template v-for="seq in pageSequences">
          <sequence v-for="hseq in seq.history"
            :key="hseq.id"

            :id="hseq.id"
            :number="seq.number"
            :locked="false"
            :verified="false"
            :author="hseq.author"
            :tstart="hseq.tstart"
            :tend="hseq.tend"
            :secondary-text="seq.secondary_text"
            :text="hseq.text"
            :history="true">
          ></sequence>

          <sequence
            :key="'main-' + seq.number"

            :id="seq.id"
            :number="seq.number"
            :locked="seq.locked"
            :verified="seq.verified"
            :highlighted="seq.number == highlightedSequence"
            :author="seq.author"
            :tstart="seq.tstart"
            :tend="seq.tend"
            :secondary-text="seq.secondary_text"
            :text="seq.text"
            :open-info="seq.openInfo ? seq.openInfo : {id: 0}"
            :history="false"
            @highlight-on="highlight(seq.number)"
            @highlight-off="highlight(0)"
          ></sequence>
        </template>
      {% endverbatim %}
    </table>

    <div class="page-wrapper">
      <pagelist :pages="pages" :cur-page="curPage" :last-page="lastPage" @change-page="onChangePage"></pagelist>
    </div>

    <div id="translation-locks" v-if="canReleaseOpenLock && openLocks.length > 0">
      Secuencias abiertas:

      <ul>
        <seqlock v-for="lock in openLocks" :key="lock.seq_number" :id="lock.id" :uid="lock.uid" :seqnum="lock.seq_number" :time="lock.time" @jump="jumpToSequence(lock.seq_number)"></seqlock>
      </ul>
    </div>
  </div>

  <div id="translation-comments">
    <h4>Comentarios de traducción</h4>
    <div class='newcomment-box'>
      <textarea id="new-comment" v-model="newComment" class="textarea" placeholder="Escribe aquí tu comentario..." autocomplete="off"></textarea>
      {% verbatim %}
      <span
        class='comment-char-counter'
        :class='{
          "normal-count": newComment.length <= maxCommentLength*0.9,
          "close-to-max": newComment.length > maxCommentLength*0.9 && newComment.length <= maxCommentLength,
          "too-many": newComment.length > maxCommentLength
        }'
      >
        <span id='comment-char-count'>{{ newComment.length < 1000 ? newComment.length : 999 }}</span> / <span id='comment-max-chars'>{{ maxCommentLength }}</span>
      </span>
      {% endverbatim %}
      <button :class="{'hidden': newComment == '', 'is-loading': submittingComment, 'is-primary': newComment.length <= maxCommentLength, 'is-danger': newComment.length > maxCommentLength}" class="button comment-publish" @click="publishComment">
         <span v-if="!submittingComment">
          Enviar
        </span>
        {# TODO: Remove this when using Bulma on this page (is-loading won't be active until then) #}
        <span v-else>
          ...
        </span>
      </button>
    </div>

    <comment v-for="comment in comments"
      :key="comment.id"
      :id="comment.id"
      :user="comment.user"
      :base-text="comment.text"
      :published-at="comment.published_at"
      :pinned="comment.pinned"
      :create-sequence-jumps="true"
      @remove="remove"
      @pin="pin"
    >
    </comment>
  </div>
</div>
{% endblock %}

{% block scripts %}
  <script type="text/javascript">
    var subID = {{ sub.id }};
    var availSecondaryLangs = {{ avail_secondary_langs|raw }};
    var me = {
      id: {{ auth.user.id }},
      username: "{{ auth.user.username }}",
      roles: [{% for role in auth.user.roles %}"{{ role }}",{% endfor %}]
    };
    var wsAuthToken = "{{ wstok }}";

    // Permissions
    var hasAdvancedTools = me.roles.includes('ROLE_JUNIOR_TT');
    var canLock = me.roles.includes('ROLE_JUNIOR_TT');
    var canReleaseOpenLock = me.roles.includes('ROLE_JUNIOR_TT');
    var canDeleteComments = me.roles.includes('ROLE_MOD');
    var canPinComments = {{ auth.has_role('ROLE_MOD') ? 'true' : 'false' }};
    var canEditTimes = me.roles.includes('ROLE_SENIOR_TT');
  </script>
  {{ assets.js('translate') }}
{% endblock %}
